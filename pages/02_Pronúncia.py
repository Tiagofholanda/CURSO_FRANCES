import streamlit as st
import pandas as pd
from auth import auth_required
from utils.module_utils import get_modules_data
from utils.excel_utils import load_excel_from_google_drive

# Verifica autentica√ß√£o
auth_required()

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Pron√∫ncia - Curso de Franc√™s", layout="wide")

# T√≠tulo da p√°gina
st.title("Pron√∫ncia Francesa")

# URL da planilha
SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/1RWd50uSh5AOTloRCXvIKPU9jBEUf4LI3/edit?usp=sharing"

def get_pronunciation_lessons():
    """Busca as li√ß√µes de pron√∫ncia na planilha"""
    try:
        # Carrega os dados da planilha
        df = load_excel_from_google_drive(SPREADSHEET_URL)
        
        # Verifica se o DataFrame est√° vazio
        if df.empty:
            st.warning("A planilha est√° vazia ou n√£o p√¥de ser carregada.")
            return {}
            
        # Verifica se as colunas necess√°rias existem
        required_columns = ['M√≥dulo', 'ordem', 'T√≠tulo da Aula', 'Dura√ß√£o', 'Link do V√≠deo', 'Link do Documento']
        missing_columns = [col for col in required_columns if col not in df.columns]
        
        if missing_columns:
            st.error(f"Colunas ausentes na planilha: {', '.join(missing_columns)}")
            return {}
            
        # Remove linhas onde o M√≥dulo est√° vazio
        df = df.dropna(subset=['M√≥dulo'])
        
        # Converte para string e remove espa√ßos extras
        df['M√≥dulo'] = df['M√≥dulo'].astype(str).str.strip()
        
        # Filtra apenas as li√ß√µes de pron√∫ncia (case insensitive)
        pronuncia_df = df[df['M√≥dulo'].str.lower() == 'pron√∫ncia']
        
        if pronuncia_df.empty:
            st.warning("Nenhuma li√ß√£o de pron√∫ncia encontrada na planilha.")
            return {}
            
        # Preenche valores vazios
        pronuncia_df = pronuncia_df.fillna('')
        
        # Cria a estrutura de m√≥dulos
        modules = {}
        module_name = 'Pron√∫ncia'  # Nome fixo j√° que estamos filtrando por isso
        modules[module_name] = []
        
        # Adiciona as li√ß√µes
        for _, row in pronuncia_df.iterrows():
            try:
                # Obt√©m a ordem, garantindo que seja um n√∫mero inteiro
                try:
                    ordem = int(float(str(row['ordem']).strip() or '0'))
                except (ValueError, AttributeError):
                    ordem = 0
                    
                # Obt√©m o t√≠tulo, garantindo que seja uma string
                titulo = str(row['T√≠tulo da Aula']).strip()
                if not titulo:
                    titulo = f"Li√ß√£o {ordem}"
                    
                modules[module_name].append({
                    'title': titulo,
                    'video_url': str(row['Link do V√≠deo']).strip(),
                    'doc_url': str(row['Link do Documento']).strip(),
                    'duration': str(row['Dura√ß√£o']).strip(),
                    'order': ordem
                })
                
            except Exception as e:
                st.warning(f"Erro ao processar linha da planilha: {str(e)}")
                continue
        
        # Ordena as li√ß√µes pela ordem
        if module_name in modules:
            modules[module_name].sort(key=lambda x: x['order'])
            
        return modules
        
    except Exception as e:
        st.error(f"Erro ao carregar as li√ß√µes: {str(e)}")
        import traceback
        st.error(traceback.format_exc())
        return {}

# Aplicar estilos responsivos
from utils.module_utils import apply_responsive_styles
apply_responsive_styles()

# Conte√∫do da p√°gina
st.markdown("""
## Aperfei√ßoe sua Pron√∫ncia

Nesta se√ß√£o, voc√™ encontrar√° v√≠deos e materiais para melhorar sua pron√∫ncia em franc√™s.
""")

def display_pronunciation_lessons():
    modules = get_pronunciation_lessons()
    
    if not modules:
        st.warning("Nenhuma li√ß√£o de pron√∫ncia encontrada.")
        return
    
    for module_name, lessons in modules.items():
        st.markdown(f"## {module_name}")
        
        for lesson in lessons:
            with st.expander(f"üé§ {lesson.get('title', 'Sem t√≠tulo')} ({lesson.get('duration', '')})", expanded=False):
                # V√≠deo
                video_url = str(lesson.get('video_url', '')).strip()
                if video_url and video_url.lower() not in ['nan', 'none', '']:
                    st.markdown("### üé• Assista √† Aula")
                    try:
                        file_id = video_url.split('/file/d/')[1].split('/')[0]
                        embed_url = f"https://drive.google.com/file/d/{file_id}/preview"
                        st.markdown(
                            f'<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; border-radius: 8px; margin: 20px 0;">'
                            f'<iframe src="{embed_url}" '
                            'style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border: none;" '
                            'allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" '
                            'allowfullscreen></iframe>'
                            '</div>',
                            unsafe_allow_html=True
                        )
                    except Exception as e:
                        st.warning(f"N√£o foi poss√≠vel carregar o v√≠deo: {str(e)}")
                
                # Material de Apoio
                doc_url = str(lesson.get('doc_url', '')).strip()
                if doc_url and doc_url.lower() not in ['nan', 'none', '']:
                    st.markdown("### üìÑ Material de Apoio")
                    try:
                        file_id = doc_url.split('/file/d/')[1].split('/')[0]
                        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
                        st.markdown(
                            f'<a href="{download_url}" '
                            'style="display: inline-flex; align-items: center; background-color: #1E88E5; color: white; '
                            'padding: 10px 20px; border-radius: 4px; text-decoration: none; font-weight: bold; margin: 10px 0;" '
                            'target="_blank">'
                            'üì• Baixar Material</a>',
                            unsafe_allow_html=True
                        )
                    except Exception as e:
                        st.warning(f"Link de documento inv√°lido: {str(e)}")

# Exibe as li√ß√µes
display_pronunciation_lessons()
